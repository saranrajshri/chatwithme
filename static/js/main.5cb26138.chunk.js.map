{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","submit","state","message","trim","tempState","chat","data","messages","push","setState","axios","post","sessionID","then","response","output","generic","map","text","handleChange","e","keyCode","target","name","value","onlineUsers","type","response_text","session_id","Container","Grid","columns","Row","Column","Card","className","Content","header","this","index","class","key","val","width","Image","src","extra","Input","placeholder","onChange","icon","Icon","onClick","inverted","circular","link","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"uXAyLeA,E,kDAtKb,aAAe,IAAD,8BACZ,gBA6BFC,OAAS,WACP,GAAkC,KAA9B,EAAKC,MAAMC,QAAQC,OAAe,CACpC,IAAIC,EAAY,EAAKH,MAAMI,KACvBC,EAAO,CACXA,KAAY,cACZA,SAAgB,IAChBA,EAAKC,SAASC,KAAK,EAAKP,MAAMC,SAE9BE,EAAUI,KAAKF,GACf,EAAKG,SAAS,CACZJ,KAAMD,EACNF,QAAS,KAGXQ,IACGC,KAAK,uDAAwD,CAC5DT,QAAS,EAAKD,MAAMC,QACpBU,UAAW,EAAKX,MAAMW,YAEvBC,MAAK,SAACC,GACL,IAAIR,EAAO,CACXA,KAAY,YACZA,SAAgB,IAChBQ,EAASR,KAAKS,OAAOC,QAAQC,KAAI,SAACC,GAChCZ,EAAKC,SAASC,KAAKU,MAErB,IAAId,EAAY,EAAKH,MAAMI,KAC3BD,EAAUI,KAAKF,GACf,EAAKG,SAAS,CACZJ,KAAMD,SA3DF,EAiEde,aAAe,SAACC,GACI,KAAdA,EAAEC,SACJ,EAAKrB,SAGP,EAAKS,SAAL,eACGW,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SArE5B,EAAKvB,MAAQ,CACXW,UAAW,GACXV,QAAS,GACTuB,YAAa,EACbpB,KAAM,CACJ,CACEqB,KAAM,YACNnB,SAAU,CACR,CACEoB,cAAe,OACfT,KAAM,+CAZJ,E,gEAoBO,IAAD,OAClBR,IACGC,KAAK,0DACLE,MAAK,SAACC,GACL,EAAKL,SAAS,CACZG,UAAWE,EAASR,KAAKsB,kB,+BAkD/B,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,QAAS,GACb,kBAACD,EAAA,EAAKE,IAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,aACd,kBAACD,EAAA,EAAKE,QAAN,CAAcC,OAAO,sBACrB,kBAACH,EAAA,EAAKE,QAAN,KACE,uBAAGD,UAAU,QAAb,mCACA,uBAAGA,UAAU,QAAb,0BACA,uBAAGA,UAAU,QAAb,6BAIN,kBAACL,EAAA,EAAKG,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,aACd,kBAACD,EAAA,EAAKE,QAAN,CAAcC,OAAQ,qBACtB,kBAACH,EAAA,EAAKE,QAAN,KACE,kBAAC,IAAD,KACE,yBAAKD,UAAU,gBACZG,KAAKrC,MAAMI,KAAKY,KAAI,SAACZ,EAAMkC,GAC1B,MAAkB,gBAAdlC,EAAKqB,KAEL,yBAAKc,MAAM,eAAeC,IAAKF,GAC7B,yBAAKJ,UAAU,eACb,2BAAI9B,EAAKE,SAAS,MAMtB,6BACGF,EAAKE,SAASU,KAAI,SAACyB,EAAKH,GACvB,OACE,yBAAKJ,UAAU,eACb,kBAACL,EAAA,EAAD,CAAMC,QAAS,GACb,kBAACD,EAAA,EAAKE,IAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,CAAaU,MAAO,GAClB,kBAACC,EAAA,EAAD,CACEC,IACE,qKAEFV,UAAU,WAGd,kBAACL,EAAA,EAAKG,OAAN,CAAaU,MAAO,IAClB,yBAAKR,UAAU,aACb,2BAAIO,EAAIxB,qBAepC,kBAACgB,EAAA,EAAKE,QAAN,CAAcU,OAAK,GACjB,kBAACC,EAAA,EAAD,CACEvB,MAAOc,KAAKrC,MAAMC,QAClB8C,YAAY,wBACZb,UAAU,aACVc,SAAUX,KAAKnB,aACfI,KAAK,UACL2B,KACE,kBAACC,EAAA,EAAD,CACE5B,KAAK,OACL6B,QAASd,KAAKtC,OACdqD,UAAQ,EACRC,UAAQ,EACRC,MAAI,iB,GAxJZC,IAAMC,WCNJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxE,c","file":"static/js/main.5cb26138.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\n\nimport {\n  Card,\n  Icon,\n  Input,\n  Image,\n  Grid,\n  Container,\n  Header,\n} from \"semantic-ui-react\";\n\nimport axios from \"axios\";\n\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      sessionID: \"\",\n      message: \"\",\n      onlineUsers: 0,\n      chat: [\n        {\n          type: \"messageTo\",\n          messages: [\n            {\n              response_text: \"text\",\n              text: \"Hi, I'm Saranraj !!, What's your name ?\",\n            },\n          ],\n        },\n      ],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .post(\"https://chatwithme-backend.herokuapp.com/createSession\")\n      .then((response) => {\n        this.setState({\n          sessionID: response.data.session_id,\n        });\n      });\n  }\n\n  submit = () => {\n    if (this.state.message.trim() !== \"\") {\n      var tempState = this.state.chat;\n      var data = {};\n      data.type = \"messageFrom\";\n      data.messages = [];\n      data.messages.push(this.state.message);\n\n      tempState.push(data);\n      this.setState({\n        chat: tempState,\n        message: \"\",\n      });\n\n      axios\n        .post(\"https://chatwithme-backend.herokuapp.com/getResponse\", {\n          message: this.state.message,\n          sessionID: this.state.sessionID,\n        })\n        .then((response) => {\n          var data = {};\n          data.type = \"messageTo\";\n          data.messages = [];\n          response.data.output.generic.map((text) => {\n            data.messages.push(text);\n          });\n          var tempState = this.state.chat;\n          tempState.push(data);\n          this.setState({\n            chat: tempState,\n          });\n        });\n    }\n  };\n\n  handleChange = (e) => {\n    if (e.keyCode === 13) {\n      this.submit();\n    }\n\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Container>\n          <Grid columns={2}>\n            <Grid.Row>\n              <Grid.Column>\n                <Card className=\"left-card\">\n                  <Card.Content header=\"Example Questions\"></Card.Content>\n                  <Card.Content>\n                    <p className=\"para\">1. Show some of your projects ?</p>\n                    <p className=\"para\">2. Where do you work ?</p>\n                    <p className=\"para\">3. Are you a student ?</p>\n                  </Card.Content>\n                </Card>\n              </Grid.Column>\n              <Grid.Column>\n                <Card className=\"main-card\">\n                  <Card.Content header={\"Chat with my bot\"} />\n                  <Card.Content>\n                    <ScrollToBottom>\n                      <div className=\"message-body\">\n                        {this.state.chat.map((chat, index) => {\n                          if (chat.type === \"messageFrom\") {\n                            return (\n                              <div class=\"wrapperRight\" key={index}>\n                                <div className=\"messageFrom\">\n                                  <p>{chat.messages[0]}</p>\n                                </div>\n                              </div>\n                            );\n                          } else {\n                            return (\n                              <div>\n                                {chat.messages.map((val, index) => {\n                                  return (\n                                    <div className=\"wrapperLeft\">\n                                      <Grid columns={2}>\n                                        <Grid.Row>\n                                          <Grid.Column width={4}>\n                                            <Image\n                                              src={\n                                                \"https://media-exp1.licdn.com/dms/image/C5103AQHYiaxy3Y18Ug/profile-displayphoto-shrink_200_200/0?e=1596067200&v=beta&t=o5PMun1q-ukWFCCtZnY3agKfZ5_xrRPBijCsuIN2uLY\"\n                                              }\n                                              className=\"image\"\n                                            />\n                                          </Grid.Column>\n                                          <Grid.Column width={12}>\n                                            <div className=\"messageTo\">\n                                              <p>{val.text}</p>\n                                            </div>\n                                          </Grid.Column>\n                                        </Grid.Row>\n                                      </Grid>\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            );\n                          }\n                        })}\n                      </div>\n                    </ScrollToBottom>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <Input\n                      value={this.state.message}\n                      placeholder=\"Enter message here...\"\n                      className=\"input-text\"\n                      onChange={this.handleChange}\n                      name=\"message\"\n                      icon={\n                        <Icon\n                          name=\"send\"\n                          onClick={this.submit}\n                          inverted\n                          circular\n                          link\n                        />\n                      }\n                    />\n                  </Card.Content>\n                </Card>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}